/**
 * Servi√ßo de Inscri√ß√£o - Supabase
 * 
 * Este servi√ßo gerencia as inscri√ß√µes na tabela tbcorrida do Supabase.
 * Respons√°vel por salvar, validar e processar inscri√ß√µes da II Corrida FARMACE.
 */

import { supabase, TbCorridaInsert, TipoParticipacao, StatusInscricao } from './supabase'

/**
 * Interface: Dados do formul√°rio de inscri√ß√£o
 */
export interface FormularioInscricao {
  // Etapa 1 - Tipo de Participa√ß√£o
  tipoParticipacao: string
  modalidadeCorrida: string
  // Etapa 2 - Dados Pessoais
  nome: string
  email: string
  telefone: string
  cpf: string
  dataNascimento: string
  cep: string
  endereco: string
  cidade: string
  estado: string
  // Etapa 3 - Informa√ß√µes da Corrida
  tamanho: string
  foto: string
  // Dados do colaborador logado
  matricula?: string
  status?: string
}

/**
 * Interface: Resposta do servi√ßo de inscri√ß√£o
 */
export interface InscricaoResponse {
  success: boolean
  data?: {
    corrida_id: number
    numeroParticipante?: string
  }
  error?: string
  details?: string
}

/**
 * Valida se o tipo de participa√ß√£o √© v√°lido
 */
function validarTipoParticipacao(tipo: string): tipo is TipoParticipacao {
  const tiposValidos: TipoParticipacao[] = ['corrida-natal', 'apenas-natal', 'retirar-cesta']
  return tiposValidos.includes(tipo as TipoParticipacao)
}

/**
 * Valida se o status √© v√°lido (conforme enum no banco)
 */
function validarStatus(status: string): status is StatusInscricao {
  const statusValidos: StatusInscricao[] = ['Pendente', 'Confirmada', 'Cancelada', 'Retirou Kit']
  return statusValidos.includes(status as StatusInscricao)
}

/**
 * Formata a data de nascimento para o formato aceito pelo PostgreSQL
 * @param dataNascimento - Data no formato YYYY-MM-DD
 * @returns Data formatada para DATE (YYYY-MM-DD)
 */
function formatarDataNascimento(dataNascimento: string): string {
  // O campo nascimento √© do tipo DATE no banco
  // Retorna no formato YYYY-MM-DD (j√° vem neste formato do input type="date")
  return dataNascimento
}

/**
 * Formata a matr√≠cula para sempre ter 6 d√≠gitos com zeros √† esquerda
 * @param matricula - Matr√≠cula do colaborador (ex: "1234" ou "001234")
 * @returns Matr√≠cula formatada com 6 d√≠gitos (ex: "001234")
 */
function formatarMatricula(matricula: string | null | undefined): string | null {
  if (!matricula) return null

  // Remove espa√ßos em branco
  const matriculaLimpa = matricula.trim()

  // Se estiver vazia ap√≥s trim, retorna null
  if (matriculaLimpa === '') return null

  // Preenche com zeros √† esquerda at√© ter 6 d√≠gitos
  const matriculaFormatada = matriculaLimpa.padStart(6, '0')

  console.log(`üìã [Inscri√ß√£o Supabase] Matr√≠cula formatada: "${matricula}" ‚Üí "${matriculaFormatada}"`)

  return matriculaFormatada
}

/**
 * Salva uma nova inscri√ß√£o na tabela tbcorrida do Supabase
 * 
 * @param formData - Dados do formul√°rio de inscri√ß√£o
 * @returns Promise com resultado da opera√ß√£o
 */
export async function salvarInscricaoSupabase(
  formData: FormularioInscricao
): Promise<InscricaoResponse> {
  try {
    console.log('üöÄ [Inscri√ß√£o Supabase] Iniciando salvamento de inscri√ß√£o...')
    console.log('üìã [Inscri√ß√£o Supabase] Dados recebidos:', {
      nome: formData.nome,
      email: formData.email,
      tipoParticipacao: formData.tipoParticipacao,
      modalidade: formData.modalidadeCorrida || 'N/A'
    })

    // Valida√ß√£o: Tipo de participa√ß√£o
    if (!validarTipoParticipacao(formData.tipoParticipacao)) {
      console.error('‚ùå [Inscri√ß√£o Supabase] Tipo de participa√ß√£o inv√°lido:', formData.tipoParticipacao)
      return {
        success: false,
        error: 'Tipo de participa√ß√£o inv√°lido',
        details: `Valor recebido: ${formData.tipoParticipacao}. Valores aceitos: corrida-natal, apenas-natal, retirar-cesta`
      }
    }

    // Valida√ß√£o: Modalidade obrigat√≥ria se tipo = 'corrida-natal'
    if (formData.tipoParticipacao === 'corrida-natal' && !formData.modalidadeCorrida) {
      console.error('‚ùå [Inscri√ß√£o Supabase] Modalidade obrigat√≥ria para corrida-natal')
      return {
        success: false,
        error: 'Modalidade √© obrigat√≥ria para participantes da corrida',
        details: 'Selecione uma modalidade: 3km, 5km ou 10km'
      }
    }

    // Valida√ß√£o: Campos obrigat√≥rios
    const camposObrigatorios = ['nome', 'email', 'telefone', 'cpf', 'dataNascimento']
    for (const campo of camposObrigatorios) {
      if (!formData[campo as keyof FormularioInscricao]) {
        console.error(`‚ùå [Inscri√ß√£o Supabase] Campo obrigat√≥rio ausente: ${campo}`)
        return {
          success: false,
          error: `Campo obrigat√≥rio ausente: ${campo}`,
          details: 'Preencha todos os campos obrigat√≥rios do formul√°rio'
        }
      }
    }

    console.log('‚úÖ [Inscri√ß√£o Supabase] Valida√ß√µes iniciais conclu√≠das')

    // Monta o objeto para inser√ß√£o no banco
    const inscricaoData: TbCorridaInsert = {
      // Dados pessoais
      nome: formData.nome.trim(),
      email: formData.email.trim().toLowerCase(),
      whatsapp: formData.telefone.trim(),
      cpf: formData.cpf.trim(),
      nascimento: formatarDataNascimento(formData.dataNascimento),

      // Tipo de participa√ß√£o
      tipo_participacao: formData.tipoParticipacao as TipoParticipacao,

      // Modalidade (apenas se participar da corrida)
      modalidade: formData.tipoParticipacao === 'corrida-natal'
        ? formData.modalidadeCorrida
        : null,

      // Tamanho da camiseta (apenas se participar da corrida ou apenas-natal)
      tamanho_camiseta: formData.tipoParticipacao === 'corrida-natal' || formData.tipoParticipacao === 'apenas-natal'
        ? formData.tamanho
        : null,

      // Regulamento (aceite impl√≠cito ao submeter o formul√°rio)
      aceitou_regulamento: true,

      // Status da inscri√ß√£o (sempre "Confirmada")
      status: (formData.status || 'Confirmada') as StatusInscricao,

      // Matr√≠cula do colaborador logado (formatada com 6 d√≠gitos)
      matricula: formatarMatricula(formData.matricula)
    }

    console.log('üì§ [Inscri√ß√£o Supabase] Dados preparados para inser√ß√£o:', {
      nome: inscricaoData.nome,
      email: inscricaoData.email,
      matricula: inscricaoData.matricula,
      tipo_participacao: inscricaoData.tipo_participacao,
      modalidade: inscricaoData.modalidade,
      tamanho_camiseta: inscricaoData.tamanho_camiseta,
      status: inscricaoData.status,
      aceitou_regulamento: inscricaoData.aceitou_regulamento
    })

    // Insere no Supabase
    console.log('üíæ [Inscri√ß√£o Supabase] Enviando para o banco de dados...')
    
    const { data, error } = await supabase
      .from('tbcorrida')
      .insert([inscricaoData])
      .select('corrida_id')
      .single()

    // Verifica se houve erro
    if (error) {
      console.error('‚ùå [Inscri√ß√£o Supabase] Erro ao inserir no banco:', error)
      console.error('üìã [Inscri√ß√£o Supabase] Detalhes do erro:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      })

      return {
        success: false,
        error: 'Erro ao salvar inscri√ß√£o no banco de dados',
        details: error.message || 'Erro desconhecido ao inserir dados'
      }
    }

    // Sucesso!
    console.log('‚úÖ [Inscri√ß√£o Supabase] Inscri√ß√£o salva com sucesso!')
    console.log('üìä [Inscri√ß√£o Supabase] ID gerado:', data.corrida_id)

    // Gera n√∫mero do participante (formato: 0001, 0002, etc)
    const numeroParticipante = data.corrida_id.toString().padStart(4, '0')
    console.log('üé´ [Inscri√ß√£o Supabase] N√∫mero do participante:', numeroParticipante)

    return {
      success: true,
      data: {
        corrida_id: data.corrida_id,
        numeroParticipante
      }
    }

  } catch (error) {
    console.error('‚ùå [Inscri√ß√£o Supabase] Erro inesperado:', error)
    
    return {
      success: false,
      error: 'Erro inesperado ao processar inscri√ß√£o',
      details: error instanceof Error ? error.message : 'Erro desconhecido'
    }
  }
}

/**
 * Busca uma inscri√ß√£o pelo CPF
 * √ötil para verificar se o colaborador j√° est√° inscrito
 * 
 * @param cpf - CPF do colaborador (formato: XXX.XXX.XXX-XX)
 * @returns Promise com os dados da inscri√ß√£o ou null
 */
export async function buscarInscricaoPorCPF(cpf: string) {
  try {
    console.log('üîç [Inscri√ß√£o Supabase] Buscando inscri√ß√£o por CPF:', cpf)

    const { data, error } = await supabase
      .from('tbcorrida')
      .select('*')
      .eq('cpf', cpf.trim())
      .is('deleted_at', null) // Apenas inscri√ß√µes ativas
      .single()

    if (error) {
      // Se n√£o encontrou, retorna null (n√£o √© erro)
      if (error.code === 'PGRST116') {
        console.log('‚ÑπÔ∏è [Inscri√ß√£o Supabase] Nenhuma inscri√ß√£o encontrada para este CPF')
        return null
      }

      console.error('‚ùå [Inscri√ß√£o Supabase] Erro ao buscar inscri√ß√£o:', error)
      throw error
    }

    console.log('‚úÖ [Inscri√ß√£o Supabase] Inscri√ß√£o encontrada:', data.corrida_id)
    return data

  } catch (error) {
    console.error('‚ùå [Inscri√ß√£o Supabase] Erro ao buscar inscri√ß√£o:', error)
    throw error
  }
}

/**
 * Verifica se um email j√° est√° cadastrado
 * 
 * @param email - Email a ser verificado
 * @returns Promise<boolean> - true se j√° existe, false caso contr√°rio
 */
export async function verificarEmailExistente(email: string): Promise<boolean> {
  try {
    const { data, error } = await supabase
      .from('tbcorrida')
      .select('corrida_id')
      .eq('email', email.trim().toLowerCase())
      .is('deleted_at', null)
      .single()

    if (error && error.code !== 'PGRST116') {
      console.error('‚ùå [Inscri√ß√£o Supabase] Erro ao verificar email:', error)
      return false
    }

    return data !== null

  } catch (error) {
    console.error('‚ùå [Inscri√ß√£o Supabase] Erro ao verificar email:', error)
    return false
  }
}

